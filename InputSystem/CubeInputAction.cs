//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/InputSystem/CubeInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CubeInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CubeInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CubeInputAction"",
    ""maps"": [
        {
            ""name"": ""CubeAction"",
            ""id"": ""6a32c448-dd59-4ac0-a213-7e066cd2db36"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""00c1bbce-f8c0-4865-9ee0-61369d70d17f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""238ea49a-e3a4-4973-ba72-491f9ab23f34"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CubeAction
        m_CubeAction = asset.FindActionMap("CubeAction", throwIfNotFound: true);
        m_CubeAction_Jump = m_CubeAction.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CubeAction
    private readonly InputActionMap m_CubeAction;
    private List<ICubeActionActions> m_CubeActionActionsCallbackInterfaces = new List<ICubeActionActions>();
    private readonly InputAction m_CubeAction_Jump;
    public struct CubeActionActions
    {
        private @CubeInputAction m_Wrapper;
        public CubeActionActions(@CubeInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_CubeAction_Jump;
        public InputActionMap Get() { return m_Wrapper.m_CubeAction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CubeActionActions set) { return set.Get(); }
        public void AddCallbacks(ICubeActionActions instance)
        {
            if (instance == null || m_Wrapper.m_CubeActionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CubeActionActionsCallbackInterfaces.Add(instance);
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(ICubeActionActions instance)
        {
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(ICubeActionActions instance)
        {
            if (m_Wrapper.m_CubeActionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICubeActionActions instance)
        {
            foreach (var item in m_Wrapper.m_CubeActionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CubeActionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CubeActionActions @CubeAction => new CubeActionActions(this);
    public interface ICubeActionActions
    {
        void OnJump(InputAction.CallbackContext context);
    }
}
